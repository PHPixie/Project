<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-10 at 16:36:42.
 */
class RoteTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Route
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Route::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        $except = false;
		Route::add('a', 'b', array());
		try {
			Route::get('c');
		}catch (Exception $e) {
			$except=true; 
		}
		$this->assertEquals(true,$except);
    }

    /**
     * @covers Route::match
     * @todo   Implement testMatch().
     */
    public function testMatchFunc()
    {
        Route::add('func', function() { return array('action' => 'index'); }, array('controller' => 'home'));
		$route = Route::match('/test');
		$this->assertEquals('func', $route->name);
		$this->assertEquals('index', $route-> params['action']);
		$this->assertEquals('home',$route->params['controller']);
    }
	
	/**
     * @covers Route::match
     * @todo   Implement testMatch().
     */
    public function testMatchDefault()
    {
        Route::add('default', '(/<controller>(/<action>(/<id>)))', array(
				'controller' => 'home',
				'action' => 'index'
			));
		$route = Route::match('/');
		$this->assertEquals('default', $route->name);
		$this->assertEquals('index', $route-> params['action']);
		$this->assertEquals('home', $route-> params['controller']);
		
		$route = Route::match('/test');
		$this->assertEquals('default', $route->name);
		$this->assertEquals('index', $route-> params['action']);
		$this->assertEquals('test', $route-> params['controller']);
		
		$route = Route::match('/test/act');
		$this->assertEquals('default', $route->name);
		$this->assertEquals('act', $route-> params['action']);
		$this->assertEquals('test', $route-> params['controller']);
		
		$route = Route::match('/test/act/8');
		$this->assertEquals('default', $route->name);
		$this->assertEquals('act', $route-> params['action']);
		$this->assertEquals('test', $route-> params['controller']);
		$this->assertEquals(8,$route->params['id']);
    }
	
	/**
     * @covers Route::match
     * @todo   Implement testMatch().
     */
    public function testMatchCustom()
    {
        Route::add('default', array('/<alpha><num>', array(
			'alpha' => '[a-z]*',
			'num'   => '[0-9]*'
		)), array(
				'controller' => 'home',
				'action' => 'index'
			));
		$route = Route::match('/test123');
		$this->assertEquals('default', $route->name);
		$this->assertEquals('index', $route-> params['action']);
		$this->assertEquals('home', $route-> params['controller']);
		$this->assertEquals('test', $route-> params['alpha']);
		$this->assertEquals(123,$route->params['num']);
    }
}
